{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Setup: Development Environment",
            "type": "shell",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Setup: Check Prerequisites",
                "Setup: Start Docker Desktop",
                "Setup: Start WSL",
                "Setup: Wait for Docker",
                "Setup: Run Setup Script"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "label": "Setup: Check Prerequisites",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-NoProfile",
                "-Command",
                "Write-Host 'Checking prerequisites...' -ForegroundColor Blue; $missing = @(); $warnings = @(); if (-not (Get-Command git -ErrorAction SilentlyContinue)) { $missing += 'Git' }; if (-not (Test-Path 'C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe')) { $missing += 'Docker Desktop' }; if (-not (wsl --status)) { $missing += 'WSL2' }; if (-not (Get-Command psql -ErrorAction SilentlyContinue)) { $warnings += 'PostgreSQL Client Tools (psql)' }; if ($missing.Count -gt 0) { Write-Host 'Missing required:' -ForegroundColor Red; foreach ($item in $missing) { Write-Host \"❌ $item\" -ForegroundColor Red }; exit 1 }; if ($warnings.Count -gt 0) { Write-Host 'Warnings:' -ForegroundColor Yellow; foreach ($item in $warnings) { Write-Host \"⚠️ $item\" -ForegroundColor Yellow }}; if ($missing.Count -eq 0) { Write-Host '✅ All prerequisites found!' -ForegroundColor Green }"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Setup: Start Docker Desktop",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-NoProfile",
                "-Command",
                "if (-not (Get-Process 'Docker Desktop' -ErrorAction SilentlyContinue)) { Start-Process 'C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe'; Write-Host 'Starting Docker Desktop...' } else { Write-Host 'Docker Desktop is already running' }"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Setup: Start WSL",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-NoProfile",
                "-Command",
                "if ((wsl --list --running).Length -eq 0) { Write-Host 'Starting WSL...'; wsl --start docker-desktop } else { Write-Host 'WSL is already running' }"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Setup: Wait for Docker",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-NoProfile",
                "-Command",
                "$attempts = 0; $maxAttempts = 20; while (-not (docker info 2>&1) -and $attempts -lt $maxAttempts) { Write-Host \"Waiting for Docker to start... Attempt $($attempts + 1)/$maxAttempts\"; Start-Sleep -Seconds 3; $attempts++ }; if ($attempts -eq $maxAttempts) { Write-Host 'Docker failed to start in time' -ForegroundColor Red; exit 1 }"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Setup: Run Setup Script",
            "type": "shell",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "command": "wsl bash -c 'cd \"$(wslpath \"${workspaceFolder}\")\" && ./dev-setup/scripts/setup-dev-env.sh'",
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Database: Start",
            "type": "shell",
            "dependsOrder": "sequence",
            "dependsOn": [
                "Setup: Start Docker Desktop",
                "Setup: Start WSL",
                "Setup: Wait for Docker",
                "Database: Start Container"
            ],
            "group": "none",
            "problemMatcher": []
        },
        {
            "label": "Database: Start Container",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-NoProfile",
                "-Command",
                "Write-Host 'Starting database...' -ForegroundColor Blue; if (docker-compose -f dev-setup/docker/docker-compose.dev.yml ps -q db) { Write-Host 'Database is already running' -ForegroundColor Yellow } else { docker-compose -f dev-setup/docker/docker-compose.dev.yml up -d db; if ($LASTEXITCODE -eq 0) { Write-Host 'Database started successfully' -ForegroundColor Green; Write-Host 'Connection details:' -ForegroundColor Blue; Write-Host '  Host: localhost' -ForegroundColor Gray; Write-Host '  Port: 5432' -ForegroundColor Gray; Write-Host '  User: dev_user' -ForegroundColor Gray; Write-Host '  Database: dev_database' -ForegroundColor Gray } else { Write-Host 'Failed to start database' -ForegroundColor Red; exit 1 } }"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Database: Stop",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-NoProfile",
                "-Command",
                "Write-Host 'Stopping database...' -ForegroundColor Blue; if (docker-compose -f dev-setup/docker/docker-compose.dev.yml ps -q db) { docker-compose -f dev-setup/docker/docker-compose.dev.yml stop db; if ($LASTEXITCODE -eq 0) { Write-Host 'Database stopped successfully' -ForegroundColor Green } else { Write-Host 'Failed to stop database' -ForegroundColor Red; exit 1 } } else { Write-Host 'Database is not running' -ForegroundColor Yellow }"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Database: Status",
            "type": "shell",
            "command": "powershell",
            "args": [
                "-NoProfile",
                "-Command",
                "Write-Host 'Checking database status...' -ForegroundColor Blue; if (docker-compose -f dev-setup/docker/docker-compose.dev.yml ps -q db) { Write-Host 'Database is running' -ForegroundColor Green; docker-compose -f dev-setup/docker/docker-compose.dev.yml logs --tail=20 db } else { Write-Host 'Database is not running' -ForegroundColor Yellow }"
            ],
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Test: Run All",
            "type": "shell",
            "command": "pytest --cov=./ --cov-report=xml",
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        },
        {
            "label": "Run: Application",
            "type": "shell",
            "command": "python -m flask run",
            "options": {
                "env": {
                    "FLASK_APP": "app.py",
                    "FLASK_ENV": "development"
                }
            },
            "presentation": {
                "reveal": "always",
                "panel": "shared"
            }
        }
    ]
}