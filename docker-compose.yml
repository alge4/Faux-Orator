name: faux-orator

services:
  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
    ports:
      - "${BACKEND_PORT}:3000"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
    depends_on:
      - db
    restart: always
    networks:
      - app-network

  # Use a simpler approach for the frontend
  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
        - REACT_APP_AZURE_TENANT_ID=${AZURE_TENANT_ID}
        - REACT_APP_API_URL=${BACKEND_URL}
    ports:
      - "80:80"
    environment:
      - REACT_APP_AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - REACT_APP_AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - REACT_APP_API_URL=${BACKEND_URL}
    depends_on:
      - backend

  db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
