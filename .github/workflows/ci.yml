name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: faux_orator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Setup test environment
        shell: pwsh
        run: |
          echo "DB_USER=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_NAME=faux_orator_test" >> .env
          echo "FLASK_ENV=testing" >> .env
          echo "SECRET_KEY=test_key" >> .env

      - name: Test database connection
        shell: pwsh
        run: |
          python -m tests.test_db_connection

      - name: Run database migrations
        shell: pwsh
        run: |
          flask db init
          flask db migrate
          flask db upgrade

      - name: Run tests
        shell: pwsh
        run: |
          pytest --cov=./ --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

      - name: Debug Information
        shell: pwsh
        run: |
          Write-Host "Environment Variables:"
          Get-ChildItem Env:
          Write-Host "`nDocker Containers:"
          docker ps -a
          Write-Host "`nDocker Networks:"
          docker network ls
          Write-Host "`nPostgreSQL Logs:"
          docker logs $(docker ps -q --filter "ancestor=cptactionhank/postgres-windows:latest")
